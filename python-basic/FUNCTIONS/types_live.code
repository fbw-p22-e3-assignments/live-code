{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "564a6d6a",
   "metadata": {},
   "source": [
    "# Type Hints in Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ab7afe1",
   "metadata": {},
   "source": [
    "*show_count*\n",
    "- takes an int as 1. arument and a string as a second argument\n",
    "- return a string with a singular or plural word, depending on the count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "61d54231",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "99 birds\n",
      "1 bird\n",
      "no birds\n"
     ]
    }
   ],
   "source": [
    "def show_count(count, word):\n",
    "    if count == 1:\n",
    "        return f\"1 {word}\"\n",
    "    count_str = str(count) if count else 'no'\n",
    "    return f\"{count_str} {word}s\"\n",
    "\n",
    "print(show_count(99, 'bird'))\n",
    "print(show_count(1, 'bird'))\n",
    "print(show_count(0, 'bird'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c40128c7",
   "metadata": {},
   "source": [
    "### Install mypy\n",
    "\n",
    "`python3 -m pip install mypy`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcc952d1",
   "metadata": {},
   "source": [
    "mypy is an excellent type-hint checker"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5404b383",
   "metadata": {},
   "source": [
    "you can run mypy as follows: `mypy main.py`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7caa027",
   "metadata": {},
   "source": [
    "to force mypy to check on all functions\n",
    "run `mypy --disallow-untyped-defs main.py`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f48c847",
   "metadata": {},
   "source": [
    "error: Function is missing a type annotation  [no-untyped-def]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74716b04",
   "metadata": {},
   "source": [
    "gradually add types for the parameters and return value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef25e289",
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_count(count, word) ->str :\n",
    "    if count == 1:\n",
    "        return f\"1 {word}\"\n",
    "    count_str = str(count) if count else 'no'\n",
    "    return f\"{count_str} {word}s\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e32728a",
   "metadata": {},
   "source": [
    "`mypy --disallow-incomplete-defs main.py`\n",
    " error: Function is missing a type annotation for one or more arguments  [no-untyped-def]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "52c15ca8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e3ae3c5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool(0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8441f0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_count(count: int, word: str) -> str :\n",
    "    if count == 1:\n",
    "        return f\"1 {word}\"\n",
    "    count_str = str(count) if count else 'no'\n",
    "    return f\"{count_str} {word}s\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64784778",
   "metadata": {},
   "source": [
    "## Default Parameter Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c11469f8",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "show_count() takes 2 positional arguments but 3 were given",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [7], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mshow_count\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mchild\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mchildren\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: show_count() takes 2 positional arguments but 3 were given"
     ]
    }
   ],
   "source": [
    "show_count(2, 'child', 'children')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5754d0ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 children\n",
      "1 child\n",
      "3 childs\n",
      "no children\n"
     ]
    }
   ],
   "source": [
    "def show_count(count: int, singular:str, plural='' ) -> str :\n",
    "    if count == 1:\n",
    "        return f\"1 {singular}\"\n",
    "    if count == 0:\n",
    "        count_str = 'no'\n",
    "    else:\n",
    "        count_str = str(count)\n",
    "    if plural != '':\n",
    "        return f\"{count_str} {plural}\"\n",
    "    return f\"{count_str} {singular}s\"\n",
    "\n",
    "print(show_count(2, 'child', 'children'))\n",
    "print(show_count(1, 'child', 'children'))\n",
    "print(show_count(3, 'child'))\n",
    "print(show_count(0, 'child', 'children'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "822551d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_count(count: int, singular:str, plural: str='' ) -> str :\n",
    "    if count == 1:\n",
    "        return f\"1 {singular}\"\n",
    "    if count == 0:\n",
    "        count_str = 'no'\n",
    "    else:\n",
    "        count_str = str(count)\n",
    "    if plural != '':\n",
    "        return f\"{count_str} {plural}\"\n",
    "    return f\"{count_str} {singular}s\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a2ab79e",
   "metadata": {},
   "source": [
    "## Using None as Default"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "54909b93",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Optional\n",
    "def show_count(count: int, singular:str, plural: Optional[str]=None ) -> str :\n",
    "    if count == 1:\n",
    "        return f\"1 {singular}\"\n",
    "    if count == 0:\n",
    "        count_str = 'no'\n",
    "    else:\n",
    "        count_str = str(count)\n",
    "    if plural:\n",
    "        return f\"{count_str} {plural}\"\n",
    "    return f\"{count_str} {singular}s\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d3ddab5",
   "metadata": {},
   "source": [
    "The construct **Optional[str]** is actually a shortcut for **Union[str, None]**, which means the type of plural may be str or None. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "42cd77c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Union"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fa5982de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 children\n",
      "1 child\n",
      "3 childs\n",
      "no children\n"
     ]
    }
   ],
   "source": [
    "def show_count(count: int, singular:str, plural: Union[str, None]=None ) -> str :\n",
    "    if count == 1:\n",
    "        return f\"1 {singular}\"\n",
    "    # count_str = str(count) if count else 'no' #####shorthand if else notation\n",
    "    #count_str = str(count) if count > 0 else 'no'\n",
    "    #count_str ='no' if count == 0 else str(count)\n",
    "    if count == 0:\n",
    "        count_str = 'no'\n",
    "    else:\n",
    "        count_str = str(count)\n",
    "    if plural:\n",
    "        return f\"{count_str} {plural}\"\n",
    "    return f\"{count_str} {singular}s\"\n",
    "\n",
    "print(show_count(2, 'child', 'children'))\n",
    "print(show_count(1, 'child', 'children'))\n",
    "print(show_count(3, 'child'))\n",
    "print(show_count(0, 'child', 'children'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73859ec2",
   "metadata": {},
   "source": [
    "Here is an example of a function that takes a string, but may return a *str* or a *int*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "295ecdb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_token(token: str) -> Union[str, int]:\n",
    "    if token.isnumeric():\n",
    "        return int(token)\n",
    "    return token"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a626723d",
   "metadata": {},
   "source": [
    "## Types are Defined by Supported Operations"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aedfc33a",
   "metadata": {},
   "source": [
    "The set of **supported operations** is the defining characteristic of type."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ad195027",
   "metadata": {},
   "outputs": [],
   "source": [
    "def double(x: dict) -> dict:\n",
    "    return x * 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3a354826",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for *: 'dict' and 'int'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [17], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdouble\u001b[49m\u001b[43m(\u001b[49m\u001b[43m{\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mbla\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m:\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mbla\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m}\u001b[49m\u001b[43m)\u001b[49m\n",
      "Cell \u001b[0;32mIn [16], line 2\u001b[0m, in \u001b[0;36mdouble\u001b[0;34m(x)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdouble\u001b[39m(x: \u001b[38;5;28mdict\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m \u001b[38;5;28mdict\u001b[39m:\n\u001b[0;32m----> 2\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mx\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\n",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for *: 'dict' and 'int'"
     ]
    }
   ],
   "source": [
    "double({'bla': 'bla'})"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b2c55f1",
   "metadata": {},
   "source": [
    "## int Is Consistent-With float"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0088fdc",
   "metadata": {},
   "source": [
    "*int* is consistent-with *float* and implements all operations that\n",
    "float does, and int implements additional operations as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a61e0ef5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "def double(x: complex) -> complex:\n",
    "    return x * 2\n",
    "\n",
    "print((double(1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "c9a5f330",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = 3\n",
    "x.imag\n",
    "x.real"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f266636a",
   "metadata": {},
   "source": [
    "therefore, *int* Is also Consistent-With *complex*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4dec5b2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1 & 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "45fe7149",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported operand type(s) for &: 'complex' and 'complex'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn [22], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43mj\u001b[49m\u001b[43m)\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m&\u001b[39;49m\u001b[43m \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m \u001b[49m\u001b[38;5;241;43m+\u001b[39;49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43mj\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for &: 'complex' and 'complex'"
     ]
    }
   ],
   "source": [
    "(1 + 1j) & (1 +1j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0629d166",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
